#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯдЦ CrewAI Integration for ZombieCoder
Multi-agent system with specialized roles
"""

import os
import json
from typing import Dict, List, Any, Optional
from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
import requests

class OllamaTool(BaseTool):
    """Custom tool for Ollama integration"""
    name: str = "Ollama AI Tool"
    description: str = "Use Ollama local AI models for code generation and analysis"
    
    def __init__(self, model: str = "deepseek-coder:latest", base_url: str = "http://localhost:11434"):
        super().__init__()
        self._model = model
        self._base_url = base_url
    
    def _run(self, prompt: str, context: str = "") -> str:
        """Run Ollama model with given prompt"""
        try:
            response = requests.post(
                f"{self._base_url}/api/generate",
                json={
                    "model": self._model,
                    "prompt": f"{context}\n\n{prompt}",
                    "stream": False
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get("response", "No response from model")
            else:
                return f"Error: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"Error connecting to Ollama: {str(e)}"

class ZombieCoderCrew:
    """ZombieCoder CrewAI integration with specialized agents"""
    
    def __init__(self):
        self.ollama_tool = OllamaTool()
        self.agents = self._create_agents()
        self.crew = None
    
    def _create_agents(self) -> Dict[str, Agent]:
        """Create specialized agents for different roles"""
        
        agents = {}
        
        # Programming Agent (рж╕рж╛рж╣ржи ржнрж╛ржЗ)
        agents["programmer"] = Agent(
            role="Senior Programmer",
            goal="Generate high-quality code and solve programming problems",
            backstory="ржЖржорж┐ рж╕рж╛рж╣ржи ржнрж╛ржЗ, ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж╛рж░ред ржЖржорж┐ ржмрж╛ржВрж▓рж╛ ржПржмржВ ржЗржВрж░рзЗржЬрж┐ ржЙржнржпрж╝ ржнрж╛рж╖рж╛ржпрж╝ ржХрзЛржб рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рж┐ред ржЖржорж╛рж░ ржмрж┐рж╢рзЗрж╖рждрзНржм рж╣рж▓рзЛ Python, JavaScript, ржПржмржВ ржЕржирзНржпрж╛ржирзНржп ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛ржпрж╝ ржжржХрзНрж╖рждрж╛ред",
            verbose=True,
            allow_delegation=False,
            tools=[self.ollama_tool],
            max_iter=3,
            language="bengali"
        )
        
        # Best Practices Agent (ржЖрж░рзНржХрж┐ржЯрзЗржХрзНржЯ)
        agents["architect"] = Agent(
            role="Software Architect",
            goal="Ensure code quality, security, and best practices",
            backstory="ржЖржорж┐ ржПржХржЬржи рж╕рж┐ржирж┐ржпрж╝рж░ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржЖрж░рзНржХрж┐ржЯрзЗржХрзНржЯред ржЖржорж┐ ржХрзЛржбрзЗрж░ ржорж╛ржи ржпрж╛ржЪрж╛ржЗ ржХрж░рж┐, ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж╕ржорж╕рзНржпрж╛ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж┐ ржПржмржВ ржмрзЗрж╕рзНржЯ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рж┐ред",
            verbose=True,
            allow_delegation=False,
            tools=[self.ollama_tool],
            max_iter=3,
            language="bengali"
        )
        
        # Verifier Agent (рж╕рждрзНржпрждрж╛ ржпрж╛ржЪрж╛ржЗржХрж╛рж░рзА)
        agents["verifier"] = Agent(
            role="Truth Verifier",
            goal="Verify information accuracy and validate assumptions",
            backstory="ржЖржорж┐ ржПржХржЬржи рж╕рждрзНржпрждрж╛ ржпрж╛ржЪрж╛ржЗржХрж╛рж░рзА ржПржЬрзЗржирзНржЯред ржЖржорж┐ рждржерзНржпрзЗрж░ ржирж┐рж░рзНржнрзБрж▓рждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж┐, ржЕржирзБржорж╛ржи ржпрж╛ржЪрж╛ржЗ ржХрж░рж┐ ржПржмржВ ржЭрзБржБржХрж┐ ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржХрж░рж┐ред",
            verbose=True,
            allow_delegation=False,
            tools=[self.ollama_tool],
            max_iter=3,
            language="bengali"
        )
        
        # Conversational Agent (ржорзБрж╕ржХрж╛ржи)
        agents["conversationalist"] = Agent(
            role="Friendly Assistant",
            goal="Provide helpful and friendly assistance to users",
            backstory="ржЖржорж┐ ржорзБрж╕ржХрж╛ржи, ржПржХржЬржи ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг AI рж╕рж╣ржХрж╛рж░рзАред ржЖржорж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж┐, ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржЗ ржПржмржВ ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржХржерзЛржкржХржержи ржХрж░рж┐ред",
            verbose=True,
            allow_delegation=False,
            tools=[self.ollama_tool],
            max_iter=3,
            language="bengali"
        )
        
        # Operations Agent (рж╣рж╛ржирзНржЯрж╛рж░)
        agents["operator"] = Agent(
            role="System Operator",
            goal="Handle system operations and automation tasks",
            backstory="ржЖржорж┐ рж╣рж╛ржирзНржЯрж╛рж░, ржПржХржЬржи ржжржХрзНрж╖ рж╕рж┐рж╕рзНржЯрзЗржо ржЕржкрж╛рж░рзЗржЯрж░ред ржЖржорж┐ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржХрж╛ржЬ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рж┐, рж╕рж┐рж╕рзНржЯрзЗржо ржоржирж┐ржЯрж░ ржХрж░рж┐ ржПржмржВ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рж┐ред",
            verbose=True,
            allow_delegation=False,
            tools=[self.ollama_tool],
            max_iter=3,
            language="bengali"
        )
        
        return agents
    
    def create_programming_task(self, task_description: str, language: str = "Python") -> Task:
        """Create a programming task"""
        return Task(
            description=f"""
            ржХрж╛ржЬ: {task_description}
            ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛: {language}
            
            ржЖржкржирж╛рж░ ржХрж╛ржЬ:
            1. ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрзЛржб рж▓рж┐ржЦрзБржи
            2. ржХрзЛржб ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
            3. ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЙржжрж╛рж╣рж░ржг ржжрж┐ржи
            4. рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ ржПржмржВ рж╕ржорж╛ржзрж╛ржи ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи
            
            ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржжрж┐ржиред
            """,
            agent=self.agents["programmer"],
            expected_output="ржХрзЛржб ржмрзНрж▓ржХ + ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛ + ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЙржжрж╛рж╣рж░ржг"
        )
    
    def create_review_task(self, code: str, language: str = "Python") -> Task:
        """Create a code review task"""
        return Task(
            description=f"""
            ржХрзЛржб рж░рж┐ржнрж┐ржЙ ржХрж░рзБржи:
            
            ржХрзЛржб:
            ```
            {code}
            ```
            
            ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржнрж╛рж╖рж╛: {language}
            
            ржЖржкржирж╛рж░ ржорзВрж▓рзНржпрж╛ржпрж╝ржи:
            1. ржХрзЛржбрзЗрж░ ржорж╛ржи ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
            2. ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж╕ржорж╕рзНржпрж╛ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи
            3. ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржЙржирзНржирждрж┐рж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржжрж┐ржи
            4. ржмрзЗрж╕рзНржЯ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи
            5. ржЙржирзНржирждрж┐рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржи
            
            ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржжрж┐ржиред
            """,
            agent=self.agents["architect"],
            expected_output="ржорзВрж▓рзНржпрж╛ржпрж╝ржи рж░рж┐ржкрзЛрж░рзНржЯ + ржЙржирзНржирждрж┐рж░ рж╕рзБржкрж╛рж░рж┐рж╢"
        )
    
    def create_verification_task(self, information: str, context: str = "") -> Task:
        """Create a verification task"""
        return Task(
            description=f"""
            рждржерзНржп ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи:
            
            рждржерзНржп: {information}
            ржкрзНрж░рж╕ржЩрзНржЧ: {context}
            
            ржЖржкржирж╛рж░ ржпрж╛ржЪрж╛ржЗржХрж░ржг:
            1. рждржерзНржпрзЗрж░ рж╕рждрзНржпрждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи
            2. рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи
            3. ржЭрзБржБржХрж┐ ржорзВрж▓рзНржпрж╛ржпрж╝ржи ржХрж░рзБржи
            4. ржмрж┐ржХрж▓рзНржк рж╕ржорж╛ржзрж╛ржи ржкрзНрж░рж╕рзНрждрж╛ржм ржХрж░рзБржи
            
            ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржжрж┐ржиред
            """,
            agent=self.agents["verifier"],
            expected_output="ржпрж╛ржЪрж╛ржЗржХрж░ржг рж░рж┐ржкрзЛрж░рзНржЯ + ржЭрзБржБржХрж┐ ржорзВрж▓рзНржпрж╛ржпрж╝ржи"
        )
    
    def create_conversation_task(self, question: str, context: str = "") -> Task:
        """Create a conversation task"""
        return Task(
            description=f"""
            ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐ржи:
            
            ржкрзНрж░рж╢рзНржи: {question}
            ржкрзНрж░рж╕ржЩрзНржЧ: {context}
            
            ржЖржкржирж╛рж░ ржЙрждрзНрждрж░:
            1. ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж░рж╛рж╕рж░рж┐ ржЙрждрзНрждрж░ ржжрж┐ржи
            2. ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ ржЖрж░ржУ рждржерзНржп ржжрж┐ржи
            3. ржЙржжрж╛рж╣рж░ржг ржмрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржжрж┐ржи
            4. ржЕржирзБрж╕рж░ржг ржкрзНрж░рж╢рзНржи ржкрзНрж░рж╕рзНрждрж╛ржм ржХрж░рзБржи
            
            ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ рж╣ржиред ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржиред
            """,
            agent=self.agents["conversationalist"],
            expected_output="ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ ржЙрждрзНрждрж░"
        )
    
    def create_operation_task(self, operation: str, system_info: str = "") -> Task:
        """Create an operations task"""
        return Task(
            description=f"""
            рж╕рж┐рж╕рзНржЯрзЗржо ржЕржкрж╛рж░рзЗрж╢ржи ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзБржи:
            
            ржЕржкрж╛рж░рзЗрж╢ржи: {operation}
            рж╕рж┐рж╕рзНржЯрзЗржо рждржерзНржп: {system_info}
            
            ржЖржкржирж╛рж░ ржХрж╛ржЬ:
            1. ржЕржкрж╛рж░рзЗрж╢ржирзЗрж░ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржХрж░рзБржи
            2. ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕рзНржЯрзЗржк ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзБржи
            3. рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи
            4. рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕ржорж╛ржзрж╛ржи ржкрзНрж░рж╕рзНрждрж╛ржм ржХрж░рзБржи
            
            ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржжрж┐ржиред
            """,
            agent=self.agents["operator"],
            expected_output="ржЕржкрж╛рж░рзЗрж╢ржи ржкрж░рж┐ржХрж▓рзНржкржирж╛ + рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕ржорж╛ржзрж╛ржи"
        )
    
    def execute_task(self, task: Task) -> str:
        """Execute a single task"""
        try:
            crew = Crew(
                agents=[task.agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            return str(result)
            
        except Exception as e:
            return f"Error executing task: {str(e)}"
    
    def execute_multi_agent_workflow(self, tasks: List[Task]) -> List[str]:
        """Execute multiple tasks with different agents"""
        try:
            # Get unique agents from tasks
            agents = list(set(task.agent for task in tasks))
            
            crew = Crew(
                agents=agents,
                tasks=tasks,
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            return str(result)
            
        except Exception as e:
            return f"Error executing multi-agent workflow: {str(e)}"
    
    def get_agent_status(self) -> Dict[str, Any]:
        """Get status of all agents"""
        return {
            "total_agents": len(self.agents),
            "agents": {
                name: {
                    "role": agent.role,
                    "goal": agent.goal,
                    "language": agent.language,
                    "tools": [tool.name for tool in agent.tools] if hasattr(agent, 'tools') else []
                }
                for name, agent in self.agents.items()
            }
        }

# Example usage and testing
if __name__ == "__main__":
    # Initialize ZombieCoder Crew
    zombie_crew = ZombieCoderCrew()
    
    print("ЁЯдЦ ZombieCoder CrewAI Integration Test")
    print("=" * 50)
    
    # Test 1: Programming Task
    print("\n1. Testing Programming Agent...")
    programming_task = zombie_crew.create_programming_task(
        "ржПржХржЯрж┐ REST API рждрзИрж░рж┐ ржХрж░рзБржи ржпрж╛ CSV ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржПржмржВ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ ржкрж╛рж░рзЗ",
        "Python"
    )
    
    result1 = zombie_crew.execute_task(programming_task)
    print(f"тЬЕ Programming Result: {result1[:200]}...")
    
    # Test 2: Code Review Task
    print("\n2. Testing Code Review Agent...")
    sample_code = """
def process_csv(file_path):
    import pandas as pd
    df = pd.read_csv(file_path)
    return df.head()
    """
    
    review_task = zombie_crew.create_review_task(sample_code, "Python")
    result2 = zombie_crew.execute_task(review_task)
    print(f"тЬЕ Review Result: {result2[:200]}...")
    
    # Test 3: Verification Task
    print("\n3. Testing Verification Agent...")
    verification_task = zombie_crew.create_verification_task(
        "Pandas CSV processing is thread-safe",
        "Multi-threaded application context"
    )
    result3 = zombie_crew.execute_task(verification_task)
    print(f"тЬЕ Verification Result: {result3[:200]}...")
    
    # Test 4: Conversation Task
    print("\n4. Testing Conversational Agent...")
    conversation_task = zombie_crew.create_conversation_task(
        "Python ржП ржХрж┐ржнрж╛ржмрзЗ async/await ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржм?",
        "Web development context"
    )
    result4 = zombie_crew.execute_task(conversation_task)
    print(f"тЬЕ Conversation Result: {result4[:200]}...")
    
    # Test 5: Operation Task
    print("\n5. Testing Operations Agent...")
    operation_task = zombie_crew.create_operation_task(
        "рж╕рж┐рж╕рзНржЯрзЗржо ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржоржирж┐ржЯрж░рж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рзБржи",
        "Linux server with Python applications"
    )
    result5 = zombie_crew.execute_task(operation_task)
    print(f"тЬЕ Operation Result: {result5[:200]}...")
    
    # Get agent status
    print("\n6. Agent Status:")
    status = zombie_crew.get_agent_status()
    print(f"Total Agents: {status['total_agents']}")
    for name, info in status['agents'].items():
        print(f"- {name}: {info['role']} ({info['language']})")
    
    print("\nЁЯОЙ All tests completed successfully!")
